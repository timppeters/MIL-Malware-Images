"""Pytorch dataset object that loads a Malware Patches dataset as images."""

import math
import numpy as np
import pandas as pd
from pathlib import Path
import torch.utils.data as data_utils
from PIL import Image
from torchvision import transforms

class Malware(data_utils.Dataset):
    def __init__(self, mal_dir, labels_file, channels = 1, transform=transforms.Compose([transforms.ToTensor()]), target_transform=None, adversarial=False, adversarial_type="zeros"):
        self.mal_dir = mal_dir
        self.mal_labels = pd.read_csv(labels_file)
        self.transform = transform
        self.target_transform = target_transform
        self.channels = channels
        self.adversarial = adversarial
        self.adversarial_type = adversarial_type

    def __len__(self):
        return len(self.mal_labels)

    def __getitem__(self, index):
        sample_id = self.mal_labels.iloc[index, 0]

        bin_path = Path(f'{self.mal_dir}/{sample_id}.bin')
        bin_data = np.fromfile(bin_path, dtype=np.uint8)
        
        # Load the malware image and resize it to the square root (square image)
        # If adversarial, pad the image to 10,000x10,000px
        if self.adversarial:
            if self.adversarial_type == "zeros":
                bin_data.resize(10000*10000) # padding with zeros
                data = bin_data.reshape((10000,10000))
            else:
                pad_data = (np.random.rand(10000*10000 - len(bin_data))*255).astype(np.uint8) # Uniform random noise 0-255
                padded_bin_data = np.concatenate((bin_data, pad_data))
                data = padded_bin_data.reshape((10000,10000))
        else:
            sqrt = int(math.ceil(math.sqrt(len(bin_data))))
            bin_data.resize(sqrt**2) # Pad to sqrt*sqrt
            data = bin_data.reshape((sqrt, sqrt))
        
        # Resize the image
        img = Image.fromarray(data)
        img = img.resize((224, 224), resample=Image.BILINEAR)
        
        # 3-channel option for when using pre-trained models
        if (self.channels == 3):
            img = img.convert('RGB')

        # Convert to tensor & normalise to [0-1]
        img = self.transform(img)

        return img, sample_id
    
    def get_sample_id_by_index(self, index):
        sample_id = self.mal_labels.iloc[index, 0]
        return sample_id
