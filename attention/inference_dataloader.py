"""Pytorch dataset object that loads a Malware dataset as bags of image patches."""

import math
import torch
import numpy as np
import pandas as pd
from pathlib import Path
import torch.utils.data as data_utils
from torchvision import transforms

# Base / MicrosoftBIG2015 loader
class MalwareBags(data_utils.Dataset):
    def __init__(self, bags_dir, labels_file, channels = 1, transform=transforms.Compose([transforms.ToTensor()]), target_transform=None, adversarial=False, adversarial_type="zeros"):
        self.bags_dir = bags_dir
        self.bag_labels = pd.read_csv(labels_file)
        self.transform = transform
        self.target_transform = target_transform
        self.channels = channels
        self.adversarial = adversarial
        self.adversarial_type = adversarial_type

    # Make a bag of image patches from a single large image
    def _make_bag(self, bin_data):

        # Pad the data to a multiple of 224x224
        padded_bin_data = np.pad(bin_data, (0, (math.ceil(len(bin_data)/(224**2)) * (224**2)) - len(bin_data)))

        # Reshape the image into a bag of instaces of 224px x 224px (H x W x C)
        bag = padded_bin_data.reshape(-1, 224, 224, 1)

        # 3-channel option for when using pre-trained models (H x W x 3)
        if (self.channels == 3):
            bag = np.broadcast_to(bag, bag.shape[:-1]+(3,)).copy()
        
        # Convert to tensor & scale to [0-1] & possibly normalise if using pre-trained model (N x C x H x W)
        bag = torch.stack([self.transform(instance) for instance in bag])
        return bag

    def __len__(self):
        return len(self.bag_labels)

    def __getitem__(self, index):
        bag_id = self.bag_labels.iloc[index, 0]

        bin_path = Path(f'{self.bags_dir}/{bag_id}.bin')
        bin_data = np.fromfile(bin_path, dtype=np.uint8)

        if self.adversarial:
            if self.adversarial_type == "zeros":
                bin_data.resize(10000*10000)
            else:
                pad_data = (np.random.rand(10000*10000 - len(bin_data))*255).astype(np.uint8) # Uniform random noise 0-255
                bin_data = np.concatenate((bin_data, pad_data))

        bag = self._make_bag(bin_data)

        return bag, bag_id