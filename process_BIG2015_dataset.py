import argparse
import os
import sys

# This program processes .bytes (hex) files from the Microsoft Malware Classification Challenge (BIG 2015)
# into .bin (binary) files, removing question marks.
# 
# Usage: python3 process_Microsoft_dataset.py <input_path> <outfile_path>

def hex_to_binary(hex_data):
    try:
        return bin(int(hex_data, 16))[2:].zfill(len(hex_data)*4)
    except ValueError:
        error(f"Error with hex: {hex_data}")

def bitstring_to_bytes(s):
    return int(s, 2).to_bytes((len(s) + 7) // 8, byteorder='big')

def process_file(infile):
    binary_data = ""
    with open(infile, "r") as f:
        hex_data = f.readlines()
    for line in hex_data:
        # Remove first 9 characters and whitespace
        line = line[9:].replace(" ", "").strip()
        # Remove question marks
        line = line.replace("?", "")
        if len(line):
            # Convert to binary
            binary = hex_to_binary(line)
            binary_data += binary
    return bitstring_to_bytes(binary_data)

class FileData:
    def __init__(self, infile, outfile):
        self.infile = infile
        self.outfile = outfile

def error(msg):
    print(msg, file=sys.stderr)
    sys.exit(1)

def parse_cmdargs():
    parser = argparse.ArgumentParser(
        description=__doc__,
        usage="Type %(prog)s [--help] input output")
    parser.add_argument("input", type=str, help="Input file")
    parser.add_argument("output", type=str, help="Output file")
    args = parser.parse_args()

    input = args.input
    output = args.output
    if not os.path.exists(input):
        error("Input is not valid")
    file = FileData(input, output)
    return file

def main():
    try:
        file = parse_cmdargs()
        infile = file.infile
        outfile = file.outfile

        sample_binary = process_file(infile)
        print(f'Input Sample "{infile}"')

        out = open(outfile, "wb")
        out.write(sample_binary)
        out.close()
        print(f'Sample stored at "{outfile}"')
    except KeyboardInterrupt:
        print("Interrupted")

if __name__ == "__main__":
    main()